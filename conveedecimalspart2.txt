package converter // Do not delete this line

fun num16(n: Int): String {
    when (n) {
        10 -> return "A"
        11 -> return "B"
        12 -> return "C"
        13 -> return "D"
        14 -> return "E"
        15 -> return "F"
    }
    return ""
}
fun num10(ch: Char): Int {
    val char = ch.toUpperCase()
    when (char) {
        'A' -> return 10
        'B' -> return 11
        'C' -> return 12
        'D' -> return 13
        'E' -> return 14
        'F' -> return 15
    }
    return 0
}
fun fromDemical() {
    println("Enter number in decimal system:")
    val numInDec = readln().toInt()
    println("Enter target base:")
    val targetBase = readln().toInt()
    var quotient = numInDec
    var remainder = ""
    var converRes = ""
    if (targetBase == 8 && numInDec < 8)
        println("Conversion to decimal result: $numInDec")
    else if (targetBase == 16 && numInDec < 10)
        println("Conversion to decimal result: $numInDec")
    else if (targetBase == 16 && numInDec in 10..15)
        println("Conversion to decimal result: ${num16(numInDec)}")
    else {
        while (quotient >= targetBase) {
            var num = quotient / targetBase
            var rem = quotient % targetBase
            remainder = rem.toString()
            quotient = num
            if (rem > 9) remainder = num16(rem)
            converRes = converRes + remainder
            //println(quotient)
            if (quotient < targetBase)  {
                if (quotient < 10) converRes = converRes + quotient.toString()
                else converRes = converRes + num16(quotient)
            }
        }
        converRes = (converRes.reversed())
        println("Conversion to decimal result: $converRes")
    }
}

fun  toDecimal() {
    println("Enter source number:")
    val sourceNumber = readln()
    println("Enter source base:")
    val sourceBase = readln().toInt()
    var decimalResult = 0
    val number = sourceNumber.reversed()
    for (i in 0..sourceNumber.lastIndex) {
        var num = 0
        if (number[i].isDigit()) {
            num = number[i].toString().toInt()
        } else {
            num = num10(number[i])
        }
        decimalResult = decimalResult + num * power(sourceBase, i)

    }
    println("Conversion to decimal result: $decimalResult")
}
fun proseccCommand(command: String) {
    when(command) {
        "/from" -> fromDemical()
        "/to" -> toDecimal()
    }
}
fun power(num: Int,pow: Int): Int {
    var numPow = 1
    if (pow == 0) return 1
    else if (pow == 1) return num
    else {
        repeat(pow) {
            numPow = numPow * num

        }
        return numPow
    }
}
fun main(args: Array<String>) {
    do{
        println("Do you want to convert /from decimal or /to decimal? (To quit type /exit)")
        val command = readln()
        proseccCommand(command)
    }while (command != "/exit")
}